****************************************
*	NMI handler		*	
****************************************
NMI	STA	NMISAVEA
	LDA	CIA2ICR	; get nmi status ad clear NMI
	LSR	A
	BCC	NONMI	; only one here
	LDA	#%01010110 ;1	; extended,blank,7 yscroll
	STA	VICCR1
	LDA	#%10010101	; &8000 to &BFFF
	STA	BANK
	LDA	#%00010111	; Multi,38,7 Xscroll
	STA	VICCR2

NONMI	LDA	NMISAVEA
IGNORE	RTI

****************************************
*	FIRST IRQ for main	*	
****************************************
IRQ	STA	IRQSAVEA	; raster entry
	LDA	#1
	STA	VICIFR
	LDA	#%00000110	; screen turn on now correct scroll
	STA	VICCR1
	LDA	#BROWN
	STA	COLOUR1
	LDA	#ORANGE
	STA	COLOUR2
	LDA	#WHITE
	STA	COLOUR3

	STX	IRQSAVEX
	STY	IRQSAVEY
	LDY	#0	; smc
SCROLLACTION	EQU	*-1
	LDA	SCREL,Y
	STA	ABSM+1
	LDA	SCREH,Y
	STA	ABSM+2
	LDA	#0
	STA	SCROLLACTION
ABSM	JSR	&FFFF
	BCS	MOVESCREEN	; block copy wanted ok
	JSR	ROBO_TO_SCREEN	; map robo kid to screen cords
	JSR	SPRITES_PLACE	; map all other sprites to screen
	LDA	YSCROLL	; change nmi position
	CMP	#6	; depending on y scroll
	BNE	QW
	LDA	#&9E	; change y scroll at 6
	NOW
QW	LDA	#&C5	; when at 0 2 4
	STA	LO1+1	; NMI timer to turn off screen low byte

	LDA	#>IRQ2
	STA	IRQVECTOR
	LDA	#<IRQ2
	STA	IRQVECTOR+1
	LDA	#SECONDRASTER
	STA	RASTER
	LDX	IRQSAVEX
	LDY	IRQSAVEY
	LDA	IRQSAVEA
	RTI

	; now set return from NMI to screen copy pointed by Y reg
MOVESCREEN	JSR	ROBO_TO_SCREEN	; map robo kid to screen cords
	JSR	SPRITES_PLACE	; map all other sprites to screen
	TSX		; get return address
	LDA	STACK+1,X	; from stack and PSR
	STA	PSR1+1	; 
	LDA	STACK+2,X	; pc low
	STA	PC1+1
	LDA	STACK+3,X	; pc high
	STA	PC1+2
	LDA	COPYTL,Y	; point new return address
	STA	STACK+2,X	; to colour memory copy
	LDA	COPYTH,Y	; so irq can be used in colour
	STA	STACK+3,X	; copy
	LDX	IRQSAVEX	; also save off previous
	STX	REGX1+1	; registers entered on irq
	LDY	IRQSAVEY	; get back from last state
	STY	REGY1+1	; y also destroyed

	LDA	YSCROLL	; change nmi position
	CMP	#6	; depending on y scroll
	BNE	QW1
	LDA	#&9E	; change y scroll at 6
	NOW
QW1	LDA	#&C5	; when at 0 2 4
	STA	LO1+1

	LDA	#>IRQ2
	STA	IRQVECTOR
	LDA	#<IRQ2
	STA	IRQVECTOR+1
	LDA	#SECONDRASTER
	STA	RASTER
	LDA	IRQSAVEA
	STA	REGA1+1
	RTI

SCREL	DL	NOBOUND2	; 0 no movement pressed
	DL	SCROLL_RIGHT	; 1
	DL	SCROLL_LEFT	; 2
	DL	SCROLL_DOWN	; 3
	DL	SCROLL_UP	; 4
	DL	DIAG1A	; 5
	DL	DIAG1B	; 6
	DL	DIAG2A	; 7
	DL	DIAG2B	; 8
	DL	DIAG3A	; 9
	DL	DIAG3B	; 10
	DL	DIAG4A	; 11
	DL	DIAG4B	; 12

SCREH	DH	NOBOUND2
	DH	SCROLL_RIGHT	; X move + 1
	DH	SCROLL_LEFT	; X move - 1
	DH	SCROLL_DOWN	; Y move + 1
	DH	SCROLL_UP	; Y move - 1
	DH	DIAG1A	; left & down
	DH	DIAG1B	; down & left
	DH	DIAG2A	; right & down
	DH	DIAG2B	; down & right
	DH	DIAG3A	; left & up
	DH	DIAG3B	; up & left
	DH	DIAG4A	; right & up
	DH	DIAG4B	; up & right

	; block copy table
COPYTL	DL	COPYRIGHT
	DL	COPYLEFT
	DL	COPYDOWN
	DL	COPYUP

COPYTH	DH	COPYRIGHT
	DH	COPYLEFT
	DH	COPYDOWN
	DH	COPYUP

DIAG1A	JSR	SCROLL_LEFT
	JMP	SCROLL_DOWN
DIAG1B	JSR	SCROLL_DOWN
	JMP	SCROLL_LEFT

DIAG2A	JSR	SCROLL_RIGHT
	JMP	SCROLL_DOWN
DIAG2B	JSR	SCROLL_DOWN
	JMP	SCROLL_RIGHT

DIAG3A	JSR	SCROLL_LEFT
	JMP	SCROLL_UP
DIAG3B	JSR	SCROLL_UP
	JMP	SCROLL_LEFT

DIAG4A	JSR	SCROLL_RIGHT
	JMP	SCROLL_UP
DIAG4B	JSR	SCROLL_UP
	JMP	SCROLL_RIGHT


****************************************
*	scroll screen right	*
****************************************
SCROLL_RIGHT	LDA	PIXEL_XL
	SEC
	SBC	#2
	STA	PIXEL_XL
	BCS	!HIGH
	DEC	PIXEL_XH
!HIGH	LDA	ROBO_XL	; robo map - 2
	SEC
	SBC	#2
	STA	ROBO_XL
	BCS	!BYTE
	DEC	ROBO_XH
!BYTE	LDA	XSCROLL
	CLC
	ADC	#SSPEED	; speed of scroll
	STA	XSCROLL
	CMP	#8	; over bound ?
	BCC	SAVEB1	; under character boundry
	LDY	#0	; save  2 bytes
	STY	XSCROLL
	LDA	TINX	; offset into tile
	EOR	#8
	STA	TINX
	BEQ	TILO1
	DEC	XOFFSET
TILO1	SEC
SAVEB1	RTS

****************************************
*	scroll screen left	*	
****************************************
SCROLL_LEFT	LDA	PIXEL_XL	; screen x map + 2
	CLC
	ADC	#2
	STA	PIXEL_XL
	BCC	!HIGH
	INC	PIXEL_XH
!HIGH	LDA	ROBO_XL	; robo x map + 2
	CLC
	ADC	#2
	STA	ROBO_XL
	BCC	!BYTE
	INC	ROBO_XH
!BYTE	LDA	XSCROLL
	SEC
	SBC	#SSPEED	; scroll speed
	STA	XSCROLL
	BPL	NOBOUND2
	LDA	#6
	STA	XSCROLL
	LDA	TINX
	EOR	#8	; use 8 as ad for pixel (if needed)
	STA	TINX
	BNE	TILO2
	INC	XOFFSET
TILO2	LDY	#1
	SEC
	RTS
NOBOUND2	CLC
	RTS

****************************************
*	scroll screen down	*
****************************************
SCROLL_DOWN	LDA	PIXEL_YL	; screen y map -2
	SEC
	SBC	#2
	STA	PIXEL_YL
	BCS	!HIGH
	DEC	PIXEL_YH
!HIGH	LDA	ROBO_YL	; robo y map - 2
	SEC
	SBC	#2
	STA	ROBO_YL
	BCS	!BYTE
	DEC	ROBO_YH
!BYTE	LDA	YSCROLL
	CLC
	ADC	#SSPEED	; speed of scroll
	CMP	#8
	STA	YSCROLL
	BCC	SAVEB2
	LDA	#0
	STA	YSCROLL
	LDA	TINY
	EOR	#8	; same as was for tinx
	STA	TINY
	BEQ	TILO3
	DEC	YOFFSET
TILO3	LDY	#2	; index for block move
	SEC
SAVEB2	RTS

****************************************
*	scroll screen up		*
****************************************
SCROLL_UP	LDA	PIXEL_YL	; screen y map + 2
	CLC
	ADC	#2
	STA	PIXEL_YL
	BCC	!HIGH
	INC	PIXEL_YH
!HIGH	LDA	ROBO_YL	; robo y map + 2
	CLC
	ADC	#2
	STA	ROBO_YL
	BCC	!BYTE
	INC	ROBO_YH
!BYTE	LDA	YSCROLL
	SEC
	SBC	#SSPEED	; scroll speed
	STA	YSCROLL
	BPL	NOBOUND4
	LDA	#6
	STA	YSCROLL
	LDA	TINY
	EOR	#8
	STA	TINY
	BNE	TILO4
	INC	YOFFSET
TILO4	LDY	#3
	SEC
	RTS
NOBOUND4	CLC		; not over character boundry
	RTS

****************************************
*	block copy routines	*
****************************************
	; copy from screen+0 to screen+1 ie TL to TR
COPYRIGHT	LDX	#38
!LOOP1	LDA	SCREEN1+(0*40),X
	STA	SCREEN1+(0*40)+1,X
	LDA	NYBBLE+(0*40),X
	STA	NYBBLE+(0*40)+1,X

	LDA	SCREEN1+(1*40),X
	STA	SCREEN1+(1*40)+1,X
	LDA	NYBBLE+(1*40),X
	STA	NYBBLE+(1*40)+1,X

	LDA	SCREEN1+(2*40),X
	STA	SCREEN1+(2*40)+1,X
	LDA	NYBBLE+(2*40),X
	STA	NYBBLE+(2*40)+1,X

	LDA	SCREEN1+(3*40),X
	STA	SCREEN1+(3*40)+1,X
	LDA	NYBBLE+(3*40),X
	STA	NYBBLE+(3*40)+1,X

	LDA	SCREEN1+(4*40),X
	STA	SCREEN1+(4*40)+1,X
	LDA	NYBBLE+(4*40),X
	STA	NYBBLE+(4*40)+1,X

	LDA	SCREEN1+(5*40),X
	STA	SCREEN1+(5*40)+1,X
	LDA	NYBBLE+(5*40),X
	STA	NYBBLE+(5*40)+1,X

	LDA	SCREEN1+(6*40),X
	STA	SCREEN1+(6*40)+1,X
	LDA	NYBBLE+(6*40),X
	STA	NYBBLE+(6*40)+1,X

	LDA	SCREEN1+(7*40),X
	STA	SCREEN1+(7*40)+1,X
	LDA	NYBBLE+(7*40),X
	STA	NYBBLE+(7*40)+1,X

	LDA	SCREEN1+(8*40),X
	STA	SCREEN1+(8*40)+1,X
	LDA	NYBBLE+(8*40),X
	STA	NYBBLE+(8*40)+1,X
	DEX
	BPL	!LOOP1

	LDX	#38
!LOOP2	LDA	SCREEN1+(9*40),X
	STA	SCREEN1+(9*40)+1,X
	LDA	NYBBLE+(9*40),X
	STA	NYBBLE+(9*40)+1,X

	LDA	SCREEN1+(10*40),X
	STA	SCREEN1+(10*40)+1,X
	LDA	NYBBLE+(10*40),X
	STA	NYBBLE+(10*40)+1,X

	LDA	SCREEN1+(11*40),X
	STA	SCREEN1+(11*40)+1,X
	LDA	NYBBLE+(11*40),X
	STA	NYBBLE+(11*40)+1,X

	LDA	SCREEN1+(12*40),X
	STA	SCREEN1+(12*40)+1,X
	LDA	NYBBLE+(12*40),X
	STA	NYBBLE+(12*40)+1,X

	LDA	SCREEN1+(13*40),X
	STA	SCREEN1+(13*40)+1,X
	LDA	NYBBLE+(13*40),X
	STA	NYBBLE+(13*40)+1,X

	LDA	SCREEN1+(14*40),X
	STA	SCREEN1+(14*40)+1,X
	LDA	NYBBLE+(14*40),X
	STA	NYBBLE+(14*40)+1,X

	LDA	SCREEN1+(15*40),X
	STA	SCREEN1+(15*40)+1,X
	LDA	NYBBLE+(15*40),X
	STA	NYBBLE+(15*40)+1,X

	DEX
	BPL	!LOOP2

	JSR	PLOTDOWNLEFT

RETURN_NMI	;LDA	#0
	;STA	SCROLLACTION
REGX1	LDX	#255	; x register
REGY1	LDY	#255
PSR1	LDA	#255	; PSW when entered in IRQ
	PHA
REGA1	LDA	#255	; A back
	PLP
PC1	JMP	&FFFF	; now back to main code

	; copy from screen+1 to screen+0 ie TR to TL
COPYLEFT	LDX	#0
!LOOP1	LDA	SCREEN1+(0*40)+1,X
	STA	SCREEN1+(0*40),X
	LDA	NYBBLE+(0*40)+1,X
	STA	NYBBLE+(0*40),X

	LDA	SCREEN1+(1*40)+1,X
	STA	SCREEN1+(1*40),X
	LDA	NYBBLE+(1*40)+1,X
	STA	NYBBLE+(1*40),X

	LDA	SCREEN1+(2*40)+1,X
	STA	SCREEN1+(2*40),X
	LDA	NYBBLE+(2*40)+1,X
	STA	NYBBLE+(2*40),X

	LDA	SCREEN1+(3*40)+1,X
	STA	SCREEN1+(3*40),X
	LDA	NYBBLE+(3*40)+1,X
	STA	NYBBLE+(3*40),X

	LDA	SCREEN1+(4*40)+1,X
	STA	SCREEN1+(4*40),X
	LDA	NYBBLE+(4*40)+1,X
	STA	NYBBLE+(4*40),X

	LDA	SCREEN1+(5*40)+1,X
	STA	SCREEN1+(5*40),X
	LDA	NYBBLE+(5*40)+1,X
	STA	NYBBLE+(5*40),X

	LDA	SCREEN1+(6*40)+1,X
	STA	SCREEN1+(6*40),X
	LDA	NYBBLE+(6*40)+1,X
	STA	NYBBLE+(6*40),X

	LDA	SCREEN1+(7*40)+1,X
	STA	SCREEN1+(7*40),X
	LDA	NYBBLE+(7*40)+1,X
	STA	NYBBLE+(7*40),X

	LDA	SCREEN1+(8*40)+1,X
	STA	SCREEN1+(8*40),X
	LDA	NYBBLE+(8*40)+1,X
	STA	NYBBLE+(8*40),X
	INX
	CPX	#39
	BNE	!LOOP1

	LDX	#0
!LOOP2	LDA	SCREEN1+(9*40)+1,X
	STA	SCREEN1+(9*40),X
	LDA	NYBBLE+(9*40)+1,X
	STA	NYBBLE+(9*40),X

	LDA	SCREEN1+(10*40)+1,X
	STA	SCREEN1+(10*40),X
	LDA	NYBBLE+(10*40)+1,X
	STA	NYBBLE+(10*40),X

	LDA	SCREEN1+(11*40)+1,X
	STA	SCREEN1+(11*40),X
	LDA	NYBBLE+(11*40)+1,X
	STA	NYBBLE+(11*40),X

	LDA	SCREEN1+(12*40)+1,X
	STA	SCREEN1+(12*40),X
	LDA	NYBBLE+(12*40)+1,X
	STA	NYBBLE+(12*40),X

	LDA	SCREEN1+(13*40)+1,X
	STA	SCREEN1+(13*40),X
	LDA	NYBBLE+(13*40)+1,X
	STA	NYBBLE+(13*40),X

	LDA	SCREEN1+(14*40)+1,X
	STA	SCREEN1+(14*40),X
	LDA	NYBBLE+(14*40)+1,X
	STA	NYBBLE+(14*40),X

	LDA	SCREEN1+(15*40)+1,X
	STA	SCREEN1+(15*40),X
	LDA	NYBBLE+(15*40)+1,X
	STA	NYBBLE+(15*40),X

	INX
	CPX	#39
	BNE	!LOOP2

	JSR	PLOTDOWNRIGHT

	JMP	RETURN_NMI

	; copy screen one line down screen to screen+40
COPYDOWN	LDX	#39	; boundary
!LOOP1	LDA	SCREEN1+(9*40),X
	STA	TEMPAREA,X
	LDA	NYBBLE+(9*40),X
	STA	TEMPAREA1,X

	LDA	SCREEN1+(8*40),X
	STA	SCREEN1+(9*40),X
	LDA	NYBBLE+(8*40),X
	STA	NYBBLE+(9*40),X

	LDA	SCREEN1+(7*40),X
	STA	SCREEN1+(8*40),X
	LDA	NYBBLE+(7*40),X
	STA	NYBBLE+(8*40),X

	LDA	SCREEN1+(6*40),X
	STA	SCREEN1+(7*40),X
	LDA	NYBBLE+(6*40),X
	STA	NYBBLE+(7*40),X

	LDA	SCREEN1+(5*40),X
	STA	SCREEN1+(6*40),X
	LDA	NYBBLE+(5*40),X
	STA	NYBBLE+(6*40),X

	LDA	SCREEN1+(4*40),X
	STA	SCREEN1+(5*40),X
	LDA	NYBBLE+(4*40),X
	STA	NYBBLE+(5*40),X

	LDA	SCREEN1+(3*40),X
	STA	SCREEN1+(4*40),X
	LDA	NYBBLE+(3*40),X
	STA	NYBBLE+(4*40),X

	LDA	SCREEN1+(2*40),X
	STA	SCREEN1+(3*40),X
	LDA	NYBBLE+(2*40),X
	STA	NYBBLE+(3*40),X

	LDA	SCREEN1+(1*40),X
	STA	SCREEN1+(2*40),X
	LDA	NYBBLE+(1*40),X
	STA	NYBBLE+(2*40),X

	LDA	SCREEN1+(0*40),X
	STA	SCREEN1+(1*40),X
	LDA	NYBBLE+(0*40),X
	STA	NYBBLE+(1*40),X
	DEX
	BPL	!LOOP1

	JSR	PLOTACROSSTOP	; top line data

	LDX	#39
!LOOP2	LDA	SCREEN1+(14*40),X
	STA	SCREEN1+(15*40),X
	LDA	NYBBLE+(14*40),X
	STA	NYBBLE+(15*40),X

	LDA	SCREEN1+(13*40),X
	STA	SCREEN1+(14*40),X
	LDA	NYBBLE+(13*40),X
	STA	NYBBLE+(14*40),X

	LDA	SCREEN1+(12*40),X
	STA	SCREEN1+(13*40),X
	LDA	NYBBLE+(12*40),X
	STA	NYBBLE+(13*40),X

	LDA	SCREEN1+(11*40),X
	STA	SCREEN1+(12*40),X
	LDA	NYBBLE+(11*40),X
	STA	NYBBLE+(12*40),X

	LDA	SCREEN1+(10*40),X
	STA	SCREEN1+(11*40),X
	LDA	NYBBLE+(10*40),X
	STA	NYBBLE+(11*40),X

	LDA	TEMPAREA,X
	STA	SCREEN1+(10*40),X
	LDA	TEMPAREA1,X
	STA	NYBBLE+(10*40),X

	DEX
	BPL	!LOOP2

	JMP	RETURN_NMI

	; copy one char line from screen+40 to screen
COPYUP	LDX	#39
!LOOP1	LDA	SCREEN1+(1*40),X
	STA	SCREEN1+(0*40),X
	LDA	NYBBLE+(1*40),X
	STA	NYBBLE+(0*40),X

	LDA	SCREEN1+(2*40),X
	STA	SCREEN1+(1*40),X
	LDA	NYBBLE+(2*40),X
	STA	NYBBLE+(1*40),X

	LDA	SCREEN1+(3*40),X
	STA	SCREEN1+(2*40),X
	LDA	NYBBLE+(3*40),X
	STA	NYBBLE+(2*40),X

	LDA	SCREEN1+(4*40),X
	STA	SCREEN1+(3*40),X
	LDA	NYBBLE+(4*40),X
	STA	NYBBLE+(3*40),X

	LDA	SCREEN1+(5*40),X
	STA	SCREEN1+(4*40),X
	LDA	NYBBLE+(5*40),X
	STA	NYBBLE+(4*40),X

	LDA	SCREEN1+(6*40),X
	STA	SCREEN1+(5*40),X
	LDA	NYBBLE+(6*40),X
	STA	NYBBLE+(5*40),X

	LDA	SCREEN1+(7*40),X
	STA	SCREEN1+(6*40),X
	LDA	NYBBLE+(7*40),X
	STA	NYBBLE+(6*40),X

	LDA	SCREEN1+(8*40),X
	STA	SCREEN1+(7*40),X
	LDA	NYBBLE+(8*40),X
	STA	NYBBLE+(7*40),X
	DEX
	BPL	!LOOP1

	LDX	#39
!LOOP2	LDA	SCREEN1+(9*40),X
	STA	SCREEN1+(8*40),X
	LDA	NYBBLE+(9*40),X
	STA	NYBBLE+(8*40),X

	LDA	SCREEN1+(10*40),X
	STA	SCREEN1+(9*40),X
	LDA	NYBBLE+(10*40),X
	STA	NYBBLE+(9*40),X

	LDA	SCREEN1+(11*40),X
	STA	SCREEN1+(10*40),X
	LDA	NYBBLE+(11*40),X
	STA	NYBBLE+(10*40),X

	LDA	SCREEN1+(12*40),X
	STA	SCREEN1+(11*40),X
	LDA	NYBBLE+(12*40),X
	STA	NYBBLE+(11*40),X

	LDA	SCREEN1+(13*40),X
	STA	SCREEN1+(12*40),X
	LDA	NYBBLE+(13*40),X
	STA	NYBBLE+(12*40),X
	DEX
	BPL	!LOOP2

	LDX	#39
!LOOP3	LDA	SCREEN1+(14*40),X
	STA	SCREEN1+(13*40),X
	LDA	NYBBLE+(14*40),X
	STA	NYBBLE+(13*40),X

	LDA	SCREEN1+(15*40),X
	STA	SCREEN1+(14*40),X
	LDA	NYBBLE+(15*40),X
	STA	NYBBLE+(14*40),X
	DEX
	BPL	!LOOP3

	JSR	PLOTACROSSBOT	; plot across at bottom of screen

	JMP	RETURN_NMI

TEMPAREA	DS	40,0
TEMPAREA1	DS	40,0

	INCLUDE	PLOTDOWN.PDS	; data down sides
	INCLUDE	PLOTALON.PDS	; data across

***************************************************************
* 	    TITLE PAGE AND HIGH SCORE IRQ	   *
***************************************************************
TIRQ	STA	IRQSAVEA
	LDA	#1
	STA	VICIFR

	LDA	SCREENENABLE	; SCREEN ON OR OFF
	STA	SCREENTEST
	ORA	#%00001011	; 25 ROWS 3 Y SCROLL
	STA	VICCR1
	LDA	#%00011000	; MULTICOLOUR 38 COLS 3 IN X SCROLL
	STA	VICCR2
	LDA	#%10010101	; &8000 to &BFFF
	STA	BANK
	LDA	#0
	STA	ENABLE	; no sprites on screen
	LDA	#DARK_GREY
	STA	COLOUR1
	LDA	#MED_GREY
	STA	COLOUR2
	LDA	#WHITE
	STA	COLOUR3
	DEC	SYNC
	STX	IRQSAVEX
	STY	IRQSAVEY
	JSR	INTSFX
	JSR	INTMUSIC
	JSR	JOYGET
	IF	PDS
	JSR	PDSMONITOR
	ENDIF
	LDX	IRQSAVEX
	LDY	IRQSAVEY
	LDA	#200
	STA	RASTER
	LDA	IRQSAVEA
	RTI

NMIPOS1	EQU	&38C4	; first nmi position

****************************************
*	SECOND IRQ for main	*
****************************************
IRQ2	STA	IRQSAVEA	; RASTER AT RASTP
	LDA	#1
	STA	VICIFR
LO1	LDA	#>NMIPOS1	; NMI TIMER COUNTERS
	STA	TIMERALow
	LDA	#<NMIPOS1
	STA	TIMERAHigh
	LDA	#&81	; &81 TIMER A &83 FOR A & B
	BIT	CIA2ICR
	STA	CIA2ICR
	LDA	#&99
	STA	CIA2CRA	; set timer A going

	IF	PDS
	STX	IRQSAVEX
	STY	IRQSAVEY
	JSR	PDSMONITOR
	LDX	IRQSAVEX
	LDY	IRQSAVEY
	ENDIF

	LDA	#%00010000	; MULTICOLOUR 38 COLS 3 IN X SCROLL
	ORA	XSCROLL
	STA	VICCR2
	LDA	SCREENENABLE	; SCREEN ON OR OFF
	STA	SCREENTEST
	ORA	YSCROLL
	STA	VICCR1

	LDA	#%10010100	; &C000 to &FFFF
	STA	BANK
	LDA	#DARK_GREY
CO1	EQU	*-1
	STA	COLOUR1
	LDA	#MED_GREY
CO2	EQU	*-1
	STA	COLOUR2
	LDA	#WHITE
CO3	EQU	*-1
	STA	COLOUR3
	STX	IRQSAVEX
	STY	IRQSAVEY
SPRITES	BIT	SOME	; or jump
NOE	LDA	#>IRQ
	STA	IRQVECTOR
	LDA	#<IRQ
	STA	IRQVECTOR+1
	DEC	SYNC
	LDA	#FIRSTRASTER	; pannel irq
	STA	RASTER
	LDA	IRQSAVEA
	LDX	IRQSAVEX
	LDY	IRQSAVEY
	RTI

SOME	JSR	SORT
	BCS	NOE	; no sprites left to do
	DEC	SYNC
	LDA	#>SPRIRQ1
	STA 	IRQVECTOR
	LDA 	#<SPRIRQ1
	STA 	IRQVECTOR+1
	JMP	NEX
	
SORT	LDX	#MAX_SPR-1	; less 1
SORTL	LDA	YCORDS,X
	BEQ	NOLEFT
	CMP	#OFF_BOTTOM_Y	; bodge
	BCS	NOLEFT	; no! not really.
	LSR	A
	TAY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BMI	SPACE
	DEY
	LDA	SORTED,Y
	BPL	NOLEFT
SPACE	TXA
	STA	SORTED,Y
NOLEFT	DEX
	BPL	SORTL
	LDY	#0
	STY	MSB	; setup msb
	DEY		; plot up first 8 sprites
FIND1	INY
	LDX	SORTED,Y
	BMI	FIND1
	CPX	#&7F	; no sprite
	BNE	CORDT1
	LDA	#0
	STA	ENABLE
	SEC
	RTS
CORDT1	LDA	XCORDS,X
	STA	X7
	LDA	YCORDS,X
	STA	Y7
	LDA	SCOL,X
	STA	SPC7
	LDA	SPR,X
	STA	SPRITE7
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND2
	LDA	MSB
	ORA	#%10000000
	STA	MSB

FIND2	INY
	LDX	SORTED,Y
	BMI	FIND2
	CPX	#&7F	; no sprite
	BNE	CORDT2
	LDA	#%10000000
	STA	ENABLE
	SEC
	RTS

CORDT2	LDA	XCORDS,X
	STA	X6
	LDA	YCORDS,X
	STA	Y6
	LDA	SCOL,X
	STA	SPC6
	LDA	SPR,X
	STA	SPRITE6
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND3
	LDA	MSB
	ORA	#%01000000
	STA	MSB

FIND3	INY
	LDX	SORTED,Y
	BMI	FIND3
	CPX	#&7F		; no sprite
	BNE	CORDT3
	LDA	#%11000000
	STA	ENABLE
	SEC
	RTS

CORDT3	LDA	XCORDS,X
	STA	X5
	LDA	YCORDS,X
	STA	Y5
	LDA	SCOL,X
	STA	SPC5
	LDA	SPR,X
	STA	SPRITE5
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND4
	LDA	MSB
	ORA	#%00100000
	STA	MSB

FIND4	INY
	LDX	SORTED,Y
	BMI	FIND4
	CPX	#&7F		; no sprite
	BNE	CORDT4
	LDA	#%11100000
	STA	ENABLE
	SEC
	RTS

CORDT4	LDA	XCORDS,X
	STA	X4
	LDA	YCORDS,X
	STA	Y4
	LDA	SCOL,X
	STA	SPC4
	LDA	SPR,X
	STA	SPRITE4
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND5
	LDA	MSB
	ORA	#%00010000
	STA	MSB

FIND5	INY
	LDX	SORTED,Y
	BMI	FIND5
	CPX	#&7F		; no sprite
	BNE	CORDT5
	LDA	#%11110000
	STA	ENABLE
	SEC
	RTS

CORDT5	LDA	XCORDS,X
	STA	X3
	LDA	YCORDS,X
	STA	Y3
	LDA	SCOL,X
	STA	SPC3
	LDA	SPR,X
	STA	SPRITE3
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND6
	LDA	MSB
	ORA	#%00001000
	STA	MSB

FIND6	INY
	LDX	SORTED,Y
	BMI	FIND6
	CPX	#&7F		; no sprite
	BNE	CORDT6
	LDA	#%11111000
	STA	ENABLE
	SEC
	RTS

CORDT6	LDA	XCORDS,X
	STA	X2
	LDA	YCORDS,X
	STA	Y2
	LDA	SCOL,X
	STA	SPC2
	LDA	SPR,X
	STA	SPRITE2
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND7
	LDA	MSB
	ORA	#%00000100
	STA	MSB

FIND7	INY
	LDX	SORTED,Y
	BMI	FIND7
	CPX	#&7F		; no sprite
	BNE	CORDT7
	LDA	#%11111100
	STA	ENABLE
	SEC
	RTS

CORDT7	LDA	XCORDS,X
	STA	X1
	LDA	YCORDS,X
	STA	Y1
	LDA	SCOL,X
	STA	SPC1
	LDA	SPR,X
	STA	SPRITE1
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND8
	LDA	MSB
	ORA	#%00000010
	STA	MSB

FIND8	INY
	LDX	SORTED,Y
	BMI	FIND8
	CPX	#&7F		; no sprite
	BNE	CORDT8
	LDA	#%11111110
	STA	ENABLE
NONELEFT	SEC
	RTS

CORDT8	LDA	XCORDS,X
	STA	X0
	LDA	YCORDS,X
	STA	Y0
	LDA	SCOL,X
	STA	SPC0
	LDA	SPR,X
	STA	SPRITE0
	LDA	#%11111111
	STA	ENABLE		; now all sprites on
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	FIND9
	LDA	MSB
	ORA	#%00000001
	STA	MSB

FIND9	INY
	LDX	SORTED,Y	; get next cord as reference
	BMI	FIND9	; to raster
	CPX	#&7F	; no sprite
	BEQ	NONELEFT	; only 8 on screen
	STY	HOLD	; save for index to next one
	CLC		; some sprites left
	RTS

SPRIRQ1	STA	IRQSAVEA
	LDA	#1
	STA	VICIFR
	STX	IRQSAVEX
	STY	IRQSAVEY
	LDY	HOLD	
	DEY
NEXT1	INY
	LDX	SORTED,Y	; get NEXT cord from table
	BMI	NEXT1
	CPX	#&7F
	BEQ	END1
moresp	LDA	RASTER
	SEC
	SBC	#21
	CMP	Y7
	BCC	OTHER1
	LDA	YCORDS,X
	STA	Y7
	LDA	XCORDS,X
	STA	X7
	LDA	SCOL,X
	STA	SPC7
	LDA	SPR,X
	STA	SPRITE7
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF7
	LDA	MSB
	ORA	#%10000000
	JMP	ST7
OFF7	LDA	MSB
	AND	#%01111111
ST7	STA	MSB
NEXT2	INY
	LDX	SORTED,Y
	BMI	NEXT2
	CPX	#&7F
END1	BEQ	END2
	LDA	RASTER
	SEC
	SBC	#21
OTHER1	CMP	Y6
	BCC	OTHER2
	LDA	YCORDS,X
	STA	Y6
	LDA	XCORDS,X
	STA	X6
	LDA	SCOL,X
	STA	SPC6
	LDA	SPR,X
	STA	SPRITE6
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF6
	LDA	MSB
	ORA	#%01000000
	JMP	ST6
OFF6	LDA	MSB
	AND	#%10111111
ST6	STA	MSB
NEXT3	INY
	LDX	SORTED,Y
	BMI	NEXT3
	CPX	#&7F
END2	BEQ	END3
	LDA	RASTER
	SEC
	SBC	#21
OTHER2	CMP	Y5
	BCC	OTHER3
	LDA	YCORDS,X
	STA	Y5
	LDA	XCORDS,X
	STA	X5
	LDA	SCOL,X
	STA	SPC5
	LDA	SPR,X
	STA	SPRITE5
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF5
	LDA	MSB
	ORA	#%00100000
	JMP	ST5
OFF5	LDA	MSB
	AND	#%11011111
ST5	STA	MSB
NEXT4	INY
	LDX	SORTED,Y
	BMI	NEXT4
	CPX	#&7F
END3	BEQ	END4
	LDA	RASTER
	SEC
	SBC	#21
OTHER3	CMP	Y4
	BCC	OTHER4
	LDA	YCORDS,X
	STA	Y4
	LDA	XCORDS,X
	STA	X4
	LDA	SCOL,X
	STA	SPC4
	LDA	SPR,X
	STA	SPRITE4
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF4
	LDA	MSB
	ORA	#%00010000
	JMP	ST4
OFF4	LDA	MSB
	AND	#%11101111
ST4	STA	MSB
NEXT5	INY
	LDX	SORTED,Y
	BMI	NEXT5
	CPX	#&7F
END4	BEQ	END5
	LDA	RASTER
	SEC
	SBC	#21
OTHER4	CMP	Y3
	BCC	OTHER5
	LDA	YCORDS,X
	STA	Y3
	LDA	XCORDS,X
	STA	X3
	LDA	SCOL,X
	STA	SPC3
	LDA	SPR,X
	STA	SPRITE3
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF3
	LDA	MSB
	ORA	#%00001000
	JMP	ST3
OFF3	LDA	MSB
	AND	#%11110111
ST3	STA	MSB
NEXT6	INY
	LDX	SORTED,Y
	BMI	NEXT6
	CPX	#&7F
END5	BEQ	END6
	LDA	RASTER
	SEC
	SBC	#21
OTHER5	CMP	Y2
	BCC	OTHER6
	LDA	YCORDS,X
	STA	Y2
	LDA	XCORDS,X
	STA	X2
	LDA	SCOL,X
	STA	SPC2
	LDA	SPR,X
	STA	SPRITE2
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF2
	LDA	MSB
	ORA	#%00000100
	JMP	ST2
OFF2	LDA	MSB
	AND	#%11111011
ST2	STA	MSB
NEXT7	INY
	LDX	SORTED,Y
	BMI	NEXT7
	CPX	#&7F
END6	BEQ	END7
	LDA	RASTER
	SEC
	SBC	#21
OTHER6	CMP	Y1
	BCC	OTHER7
	LDA	YCORDS,X
	STA	Y1
	LDA	XCORDS,X
	STA	X1
	LDA	SCOL,X
	STA	SPC1
	LDA	SPR,X
	STA	SPRITE1
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF1
	LDA	MSB
	ORA	#%00000010
	JMP	ST1
OFF1	LDA	MSB
	AND	#%11111101
ST1	STA	MSB
NEXT8	INY
	LDX	SORTED,Y
	BMI	NEXT8
	CPX	#&7F
END7	BEQ	END8
	LDA	RASTER
	SEC
	SBC	#21
OTHER7	CMP	Y0
	BCC	OTHER8
	LDA	YCORDS,X
	STA	Y0
	LDA	XCORDS,X
	STA	X0
	LDA	SCOL,X
	STA	SPC0
	LDA	SPR,X
	STA	SPRITE0
	LDA	#255
	STA	SORTED,Y
	LDA	MSBS,X
	BEQ	OFF0
	LDA	MSB
	ORA	#%00000001
	JMP	ST0
OFF0	LDA	MSB
	AND	#%11111110
ST0	STA	MSB

NEX	INY
	LDX	SORTED,Y
	BMI	nex
	CPX	#&7F
	BEQ	END8
OTHER8	STY	HOLD
	TYA		; work back to sprite cord
	SEC	
	SBC	#2	; back a little
	ASL	A	; *2
	STA	RASTER
	CMP	RASTER
	BEQ	SAMAS
	BCS	RE
SAMAS	LDA	RASTER
	CMP	#OFF_BOTTOM_Y	; NOT TO GO PAST NMI
	BCS	END8
	CLC
	ADC	#1
	CMP	YCORDS,X
	BCS	nex
	JMP	moresp

END8	LDA 	#>IRQ
	STA 	IRQVECTOR
	LDA 	#<IRQ
	STA 	IRQVECTOR+1
	LDA	#1
	STA	VICIFR
	LDA	#FIRSTRASTER
	STA	RASTER
RE	LDX	IRQSAVEX
	LDY	IRQSAVEY
	LDA	IRQSAVEA
	RTI

	; Scan Joystick and Keyboard
JOYGET	LDA	#255
	STA	CIA1+2
	LDA	#&FD
	STA	CIA1+0
	LDA	CIA1+1
	CMP	#&7F
	BNE	SHIFTLOCK
	LDA	#1
	NOW
SHIFTLOCK	LDA	#0
	STA	PAUSE
	LDA	#&7F
	STA	CIA1+0
	LDA	CIA1+1
	CMP	#&EF
	BNE	SPACEBAR
	LDA	#1
	NOW
SPACEBAR	LDA	#0
	STA	SELECT

	LDA	#0
	STA	CIA1+2	; read joystick
	STA	LEFT
	STA	RIGHT
	STA	UP
	STA	DOWN
	STA	FIRE
	LDA	CIA1
	EOR	#%00011111
	STA	JOY
	AND	#%00001111	; use only direction bits
	STA	MOVE

	; 7 6 5 4 3 2 1 0
	; 0 up
	; 1 down
	; 2 left
	; 3 right
	; 4 fire
	LDA	JOY
	LSR	A
	ROL	UP
	LSR	A
	ROL	DOWN
	LSR	A
	ROL	LEFT
	LSR	A
	ROL	RIGHT
	LSR	A
	ROL	FIRE
	RTS

****************************************
*	MAP SPRITES TO SCREEN	*
****************************************
	; TOP left x screen in PIXEL_XL,XH
	; TOP left y screen in PIXEL_YL,YH
	; remembering that sprite 0,0 is not left x and top y
	; part of screen. So sprite start offsets must be added

	; clipping for outside window done when coords are worked out
	; rather than play with 16 bit minus numbers (lazy bones)

	; map robo kid to screen cords
	; robo map x ( ROBO_XL & ROBO_XH )
	; robo map y ( ROBO_YL & ROBO_YH )
	; screen x ( PIXEL_XL & PIXEL_XH )
	; screen y ( PIXEL_YL & PIXEL_YH )

	; robo map - screen for position (Robo allways the greater)
	; and flames sprites
ROBO_TO_SCREEN	LDA	ROBO_XL	; robo pixel map x low
	SEC
	SBC	PIXEL_XL	; screen top left
	STA	ANSWERX	; temp answer lo
	LDA	ROBO_XH	; robo pixel map x hi
	SBC	PIXEL_XH	; top left pixel screen
	STA	ANSWERX+1	; temp answer hi
	LDA	ANSWERX
	CLC
	ADC	#START_LEFT_X	; start of left edge
	STA	ROBO_X	; now is cord for robo on screen
	LDA	ANSWERX+1	; x high byte
	ADC	#0
	STA	ROBO_MSB	; top bit

	LDA	ROBO_YL	; robo cord y lo
	SEC
	SBC	PIXEL_YL	; screen pixel cord
	CLC		; ignore high
	ADC	#START_TOP_Y
	STA	ROBO_Y	; to screen

	LDA	ONOFF+0	; top flame there
	BEQ	NOSPRITE1	; no sprite on screen

	BIT	DIR	; robo faceing
	BEQ	LOOK1

	LDA	ROBO_X	; put on right side of sprite
	CLC
	ADC	#16
	STA	ROBO_X+1
	LDA	ROBO_MSB
	ADC	#0
	STA	ROBO_MSB+1
	JMP	DOY1	; work out y place

LOOK1	LDA	ROBO_X	; put on left side of sprite
	SEC
	SBC	#16	; movement
	STA	ROBO_X+1
	LDA	ROBO_MSB
	SBC	#0
	STA	ROBO_MSB+1

DOY1	LDA	ROBO_Y	; robo screen y
	BIT	HOVER	; flames are what
	BMI	FLIN	; hovering no move
	SEC		; move when fly
	SBC	#7	; tiny adjust for position
	NOW		; skip LDA #0
NOSPRITE1	LDA	#0	; no sprite there
FLIN	STA	ROBO_Y+1	; y cord

	LDA	ONOFF+1	; bottom flame there
	BEQ	NOSPRITE2	; no sprite on screen

	BIT	HOVER	; when hover
	BMI	LOOK2	; no cord adjust

	BIT	DIR
	BPL	!FACR
	LDA	ROBO_X
	CLC
	ADC	#3	; move forward
	STA	ROBO_X+2
	LDA	ROBO_MSB
	ADC	#0
	JMP	FOUR_CYCLES

!FACR	LDA	ROBO_X
	SEC
	SBC	#3	; move back bottom flames	
	STA	ROBO_X+2
	LDA	ROBO_MSB
	SBC	#0
	JMP	FOUR_CYCLES

LOOK2	LDA	ROBO_X
	STA	ROBO_X+2
	LDA	ROBO_MSB
FOUR_CYCLES	STA	ROBO_MSB+2

DOY2	LDA	ROBO_Y	; robo screen y
	CLC
	ADC	#23	; down a little bit
	NOW
NOSPRITE2	LDA	#0	; no sprite there
	STA	ROBO_Y+2	; y cord
	RTS

	; Place all other sprites to screen from map position
SPRITES_PLACE	LDX	#MAX_SPRITES-1
SET_ALL	LDA	SPRITE_USE,X	; see if anything there
	BEQ	SAM_PLUS	; not in use

	LDA	SPRITE_XL,X	; pixel map x low
	SEC
	SBC	PIXEL_XL	; screen top left
	STA	ANSWERX	; temp answer lo
	LDA	SPRITE_XH,X	; weapon pixel map x hi
	SBC	PIXEL_XH	; top left pixel screen
	STA	ANSWERX+1	; temp answer hi

	LDA	SPRITE_YL,X	; weapon cord y lo
	SEC
	SBC	PIXEL_YL	; screen pixel cord
	STA	ANSWERY	; temp answer lo
	LDA	SPRITE_YH,X	; weapon cord y hi
	SBC	PIXEL_YH	; screen pixel cord
	STA	ANSWERY+1	; temp answer hi

	LDA	ANSWERX
	CLC
	ADC	#START_LEFT_X	; start of left edge
	STA	SPRITE_X,X	; now is cord for enemy
	LDA	ANSWERX+1	; x high byte
	ADC	#0
	STA	SPRITE_MSB,X	; top bit
	BNE	LOOK_RIGHT1	; msb set see if off right

	LDA	SPRITE_X,X	; new x cord
	CMP	#OFF_LEFT_X+1	; off left side
	BCS	OKSO_FAR	; check on first
	BCC	SAM_PLUS	; less common as off

LOOK_RIGHT1	CMP	#2	; way over 512 never on screen
	BCS	SAM_PLUS
	LDA	SPRITE_X,X	; this x cord
	CMP	#OFF_RIGHT_X	; off right side
	BCS	SAM_PLUS	; no display

	; check for y position top screen window
OKSO_FAR	LDA	ANSWERY	; no high bye for y 
	CLC
	ADC	#START_TOP_Y	; start of top y
	STA	SPRITE_Y,X
	LDA	ANSWERY+1	; use as answer may = &ffff
	ADC	#0	; so ass start top >
	BNE	SAM_PLUS	; not zero
	LDA	SPRITE_Y,X	; back new	
	CMP	#OFF_TOP_Y+1	; off top of screen
	BCC	SAM_PLUS	; no diplay
	CMP	#OFF_BOTTOM_Y
	BCS	SAM_PLUS	; no display else leve set
	DEX
	BPL	SET_ALL
	RTS

SAM_PLUS	LDA	#0	; no y in sprite list
	STA	SPRITE_Y,X
	DEX		; rest of weapons
	BPL	SET_ALL
	RTS

	; title high score IRQ and no NMI
SETTIRQ	SEI	
	LDA	#127
	STA	CIA1ICR
	STA	CIA2ICR
	LDA	CIA1ICR
	LDA	CIA2ICR
	LDA	#>TIRQ
	STA	IRQVECTOR
	LDA	#<TIRQ
	STA	IRQVECTOR+1
	LDA	#>IGNORE
	STA	NMIVECTOR
	LDA	#<IGNORE
	STA	NMIVECTOR+1
	LDA	#1
	STA	VICIMR
	STA	VICIFR
	LDA	#0
	STA	VICCR1
	LDA	#200
	STA	RASTER
	CLI
	RTS

	; main game IRQ setup, and NMI
SETIRQ	;SEI		; already disabled after loading
	LDA	#127
	STA	CIA1ICR
	STA	CIA2ICR
	LDA	CIA1ICR
	LDA	CIA2ICR
	LDA	#>IRQ
	STA	IRQVECTOR
	LDA	#<IRQ
	STA	IRQVECTOR+1
	LDA	#>NMI
	STA	NMIVECTOR
	LDA	#<NMI
	STA	NMIVECTOR+1
	LDA	#1
	STA	VICIMR
	STA	VICIFR
	LDA	#0
	STA	VICCR1
	STA	MOVE	; joystick move byte
	LDA	#&2C	; BIT
	STA	SPRITES	; no sprites on screen
	LDA	#250
	STA	RASTER
	CLI
	RTS

	; Used for disk loader no irq's or nmi's
SETNOIRQ	SEI	
	LDA	#127
	STA	CIA1ICR
	STA	CIA2ICR
	LDA	CIA1ICR
	LDA	CIA2ICR
	LDA	#>IGNORE
	STA	IRQVECTOR
	STA	NMIVECTOR
	LDA	#<IGNORE
	STA	IRQVECTOR+1
	STA	NMIVECTOR+1
	LDA	#0
	STA	VICIMR
	STA	VICIFR
	STA	VICCR1
	RTS

SCREEN_ON	LDA	#&10	; ENABLE SCREEN DISPLAY
	STA	SCREENENABLE
!WAIT	CMP	SCREENTEST
	BNE	!WAIT
	RTS

SCREEN_OFF	LDA	#0	; BLANK SCREEN TO BORDER
	STA	SCREENENABLE
!WAIT	CMP	SCREENTEST
	BNE	!WAIT
	RTS
	; setup colours and scroll max positios for level number
SETLEVBITS	LDA	C1	; COLOUR1
	STA	CO1
	LDA	C2	; COLOUR2
	STA	CO2
	LDA	C3	; COLOUR3
	STA	CO3
	LDA	TILEX	; size of map x tiles - 20
	STA	MAXX
	STA	STOP_SCANX
	LDA	TILEY	; size of map y tiles - 10
	STA	MAXY
	STA	STOP_SCANY
	RTS


